#Set Makefile for the DesySusy ntuple analysis
#
# Author: Dirk Kruecker, 10.2.2011

#----------------------- here you can input your files and libraries ----------
#
# we compile all *.C and *.cpp defined in SOURCES
#

  SRCDIR       = ./src
  OBJDIR       = ./obj
  BINDIR       = .
  DEPDIR       = $(OBJDIR)
  VPATH        = $(SRCDIR):$(OBJDIR):$(BINDIR):$(DEPDIR)
  ALL          = $(wildcard $(SRCDIR)/*.cpp)
  ALL         := $(notdir $(ALL))
  MAINS        = main_RA4b.cpp makeObjects.cpp main_example.cpp
  SOURCES_LIB  = AnalysisObject.cpp Particle.cpp Electron.cpp Muon.cpp Tau.cpp Jet.cpp GenJet.cpp EventInfo.cpp Event.cpp Tools.cpp SubTree.cpp Bonsai.cpp mt2w_bisect.cpp mt2w_interface.cpp IsoTrackVeto.cpp BTagReshaping.cpp myBTagReshaping.cpp btag_payload_b.cpp btag_payload_light.cpp

  SOURCES     := $(filter-out $(SOURCES_LIB) $(MAINS),$(ALL))

# with additional libs and includes
# e.g. MORELIBS = -L/path -lblub
  MORELIBS = -L/usr/lib64 -lz -L./src/HadChi2 -lhadchi2 -L./src/Topness -ltopness
# e.g. -I/path
  MOREINCS = -I/usr/include

OBJS      = $(notdir $(SOURCES))
OBJS     := $(OBJS:.C=.o)
OBJS     := $(OBJS:.cpp=.o)

HEADERS_LIB = $(notdir $(SOURCES_LIB))
HEADERS_LIB:= $(HEADERS_LIB:.cpp=.h)
OBJS_LIB   = $(notdir $(SOURCES_LIB))
OBJS_LIB   := $(OBJS_LIB:.cpp=_sl.o)	 

SOURCES_MTTOOLS = ./src/mTtools/MT2/mt2_bisect.cpp 
OBJS_MTTOOLS   := $(SOURCES_MTTOOLS:.cpp=.o)	 
OBJS_MTTOOLS_LIB   := $(SOURCES_MTTOOLS:.cpp=_sl.o)	 

#------------------------------------------------------------------------------

ifndef ROOTSYS
	$(error ROOTSYS is not defined!)
endif

#ROOTLIBS    = -L/home/fcostanz/Software/ROOT/root_v5.34.00/lib -lCore -lCint -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -pthread -lm -ldl -rdynamic -lGenVector -lMathMore
ROOTLIBS    = `root-config --libs` -lGenVector -lMathMore -lMinuit2
CXX         = g++ -g3 -O1
CXXFLAGS    = `root-config --cflags` -I ./  -I ./src
LD          = g++
LDFLAGS     = `root-config --ldflags`

.SUFFIXES: .cpp .C .o .so

# do we have a 32-bit root?
BUILDTYPE = $(findstring 64-bit, $(shell file -L ${ROOTSYS}/lib/libCore.so ) )
# check if we have changed the environment (32/64) and recompile everything
FILETYPE =  $(findstring 64-bit, $(shell file -L NtupleTools2Dict.o ) )
ifneq (${BUILDTYPE},${FILETYPE}) 
$(info Different build-types for ROOT and NtupleTools2Dict. Recompiling all.)
$(shell rm *.o NtupleTools2Dict.cxx )
endif

#------------------------------------------------------------------------------

all: objdir MTTOOLS HADCHI2 TOPNESS SYSTEMATICS makeObjects

makeObjects: $(OBJS) NtupleTools2Dict.o libRA4bDict.so makeObjects.o
	@echo $(SOURCES)
	$(LD) $(LDFLAGS) -o $@ $(addprefix $(OBJDIR)/, makeObjects.o $(OBJS)) -L./ -lRA4bDict -L./src/Systematics -lsystematics $(ROOTLIBS) $(MORELIBS)
	@echo "$@ done"

#Rules for creating a test program
example: $(OBJS) $(MAINS) NtupleTools2Dict.o libRA4bDict.so
	$(LD) $(LDFLAGS) $(addprefix $(OBJDIR)/main_example.o $(OBJS)) $(OBJS_MTTOOLS) $(ROOTLIBS) $(MORELIBS) -o $@
	@echo "$@ done"

#Rules for creating the linked library
%_sl.o : %.cpp		
	$(CXX) -fPIC $(MOREINCS) $(CXXFLAGS) -o $(OBJDIR)/$@ -c $<
NtupleTools2Dict_sl.o: NtupleTools2Dict.cxx
	 $(CXX) -fPIC $(CXXFLAGS) -D __NTHEADER___ -o $(OBJDIR)/$@ -c $<	
libRA4bDict.cpp : $(HEADERS_LIB) libRA4bDict_Linkdef.h 
	rootcint -f $@ -c -p  $^ 
libRA4bDict.so : MTTOOLS HADCHI2 TOPNESS $(OBJS_LIB) NtupleTools2Dict_sl.o libRA4bDict_sl.o
	$(CXX) -shared $(LDFLAGS) -o $@ $(addprefix $(OBJDIR)/,$(OBJS_LIB) NtupleTools2Dict_sl.o libRA4bDict_sl.o) $(OBJS_MTTOOLS_LIB) $(ROOTLIBS) $(MORELIBS) 
	@echo "Made library!"

objdir:
	mkdir -p $(OBJDIR)

NtupleTools2Dict.cxx: NtupleTools2_h.h  Linkdef.h
		@echo "Generating dictionary $@..."
		@rootcint -f $@ -c  -p $^
NtupleTools2Dict.o: NtupleTools2Dict.cxx
	 $(CXX) $(CXXFLAGS) -D __NTHEADER___ -c $<	
NtupleTools2_h.h:  NtupleTools2.h
	touch NtupleTools2_h.h 

MTTOOLS:
	@echo "Making MTTOOLS..."
	cd src/mTtools/MT2; make
	cd src/mTtools/WIMPMASS; make

HADCHI2:
	@echo "Making HadChi2..."
	cd src/HadChi2; make
TOPNESS:
	@echo "Making Topness..."
	cd src/Topness; make	
SYSTEMATICS: libRA4bDict.so
	@echo "Making Systematics..."
	cd src/Systematics; make clean; make; cp libsystematics.so ../../Bonsai

cleanAll: clean
	cd src/Systematics; make clean

clean:
	@echo "Cleaning all compiled files, dependencies, dictionaries, etc."
	@rm -f *Dict.* 
	@rm -f *Dict_*
	@rm -f *.so
	@rm -f core 
	@rm -f $(OBJDIR)/*.so 
	@rm -f $(OBJDIR)/*.o 
	@rm -f $(DEPDIR)/*.d

#This is the rule for creating the dependency files
%.d: %.cpp
	$(CXX) $(CXXFLAGS) $(MOREINCS) -MM -MF $(DEPDIR)/$@ $<
%.d: %.C
	$(CXX) $(CXXFLAGS) $(MOREINCS) -MM -MF $(DEPDIR)/$@ $<

%.o: %.cpp %.d
	$(CXX) $(CXXFLAGS) $(MOREINCS) -c $< -o $(OBJDIR)/$@
%.o: %.C %.d
	$(CXX) $(CXXFLAGS) $(MOREINCS) -c $< -o  $(OBJDIR)/$@

-include $(addprefix $(DEPDIR)/,$(ALL:%.cpp=%.d))